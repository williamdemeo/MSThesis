38

TABLE 2: ESTIMATES OF >.,,,,,.,,,(K) = 0.998746 USING z/>2

  
   
  
  
   
  

  
  
   
   

   
  
  
   
  

    
   
   
   

sim. # B2
1 0.994262 0.006142 0.994222 N / A
2 0.994333 0.002974 0.994332 N / A
3 0.994307 0.008892 0.994374 0.726320
4 0.994436 0.012884 0.994685 0.361404
5 0.993789 0.006909 0.993820 0.788710

using the Matlab program tpm.m listed in the Appendix. They should be very accurate, and it
takes the Matlab routine eig() just over 20 minutes of cpu time on a Sun Ultra to ﬁnd all the
eigenvalues of K.

As shown by Theorem 4.1.1, the [Ts provide conservative error bounds on the eigenvalue
estimates from the previous Lanczos step. Unfortunately, for this example, ,6 appears to be too
conservative as it does not even allow us to bound our estimates away from 1. Furthermore, it
seems that the estimates generated by the method above fall systematically below the true value of
the subdominant eigenvalue. In every simulation, an approximate invariant subspace (to machine
tolerance) was reached after computing at most 2 pairs of Lanczos coefficients. For ¢1 we see that
it was reached after computing only one pair on simulations 3 and 4, similarly for ¢2 on simulations
1 and 2. These observations indicate that the chosen observable is close to the slowest mode (or
eigenfunction) of the process. That is, we should observe fast convergence on an approximate
invariant space. However, the space found might contain only the second slowest mode of the
process and, in that case, our eigenvalue estimates would be closer to the third largest eigenvalue,
instead of the second largest as desired.‘

The matrix T was produced by the program lanczos . c and its eigenvalues were computed
by Matlab, both operations taking a few seconds. Granted, comparing a few seconds to the 20

minutes it takes Matlab is not justiﬁed since a simple call to the routine eig() is far from the

 

‘Recall that we explained above why we will never converge to the eigenspace corresponding to the largest eigen-
value (which is always 1). That would require a (nearly) constant observable function.

