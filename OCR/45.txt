% Hatlab code tpm.m for generating transition probability matrix
Z and computing its eigenvalues directly

1

Z Written by Hilliam J. De Heo on 1/10/98

1

Z Inputs:

Z d = number of nodes of the ising lattice (e.g. d=10)

Z beta = Annealing schedule (e.g. beta - 2,

1 when beta -> 0 will always go to new state
1 when beta -> infty will never go to state of higher energy)
2

disp(’bui1ding proposition matrix...’)

states = 2‘d;

A = 0;

for i=0:(d-1)

E=eye(2”i);

A = [A E;E A];

end

B = .5#eye(states);

A = B + .5-(1/d)*A;

2 our modified Glauber dynamics requires the B and the .5¥(1/d)

disp(’...done’)

1 display pattern of nonzero entries
1 spy(A)

Z check that all row sums are 1
check=O;
for i=1:states

check = check + (not(sum(A(i,1:states))<.99));
end
1 if not all rows sum to 1, print check = (# of rows with sum=1)
if not(check==states)

check

error(’Row sums are not all 1’)
end

Z construct matrix of states
E = zeros(d,states);
f1ip=-1;
for i=1:d
for j=1:2‘(i-1):states
flip = -1*f1ip;
for k=0:2“(i-1)

45

