main()

{

char tfilename;

FILE *ofp;

double temp=O, *T;

long i, j, nrou, nlanc, START;
int f1ag=O;

filename = cma11oc(HAx_NAHE);

printf("\nName of file containing observed values: “);

read_name(fi1ename);

printf(“\nTota1 number of observations in file (iterations):

scanf(“Zu”,&nrov);

printf(“\nNumber of leading observations to discard: “);

scanf("Zu",&START);

printf("\nNumber of Lanczos coefficients desired: “);

scanf("%u",&n1anc);

vhi1e(2*n1anc > nrow—START)

{
printf("\nNot enough data for that many coefficients.\n“);
printf("\nEnter a smaller number of Lanczos coefficients: “);
scanf("Xu“,&n1anc);

}

II);

phi = dma11oc(nrow);
cov=dma11oc(2#n1anc);
var=dma11oc(1);
ave=dma11oc(1);

T = dma11oc(n1anc#n1anc); for(i=0;i<n1anc;i++) T[i]=(doub1e)0;

/* observable phi is stored contiguously column-wise (e.g. by HATLAB) t/
mat1abread(phi, nrow, 1,fi1ename);

/* send the observable, offset by START */
moment(phi+START,nrou-START,ave, var, cov,2*n1anc-1);

/* First column of T */

T[0] = a1pha(1);
if((temp=betasq(1))>HACHEPS*10)
{

T[1]=sqrt(temp);

/* General column of T */

J'=2:

for(i=1;i<n1anc-1, f1ag==O;)
{

T[itn1anc+i-1]=sqrt(betasq(i));

48

main()

{

char tfilename;

FILE tofp;

double temp=0, #T;

long i, j, nrow, nlanc, START;
int f1ag=0;

filename = cma11oc(HAx_NAH);

princf("\nName of file containing observed values: “);
read_name(fi1ename);

printf("\nTota1 number of observations in file (iterations): “);
scanf("2u“,&nrow);

printf("\nNumber of leading observations to discard: “);
scanf("Zu",&START);

printf("\nNumber of Lanczos coefficients desired: “);
scanf("%u“,&n1anc);

whi1e(2*n1anc > nrou-START)

{
printf("\nNot enough data for that many coefficients.\n");

printf("\nEnter a smaller number of Lanczos coefficients: “);
scanf("Zu",&n1anc);
}

phi = dma11oc(urow);
cov=dma1loc(2*n1anc);
var=dma11oc(1);
ave=dma11oc(1);

T = dma11oc(n1anc*n1anc); for(i=0;i<n1anc;i++) T[i]=(doub1e)O;

/* observable phi is stored contiguously column-wise (e.g. by HATLAB) */
mat1abread(phi, nrov, 1,fi1ename);

/* send the observable, offset by START #/
moment(phi+START,nrov-START,ave, var, cov,2*n1anc-1);

/# First column of T */

T[0] = a1pha(1);
if((temp=betasq(1))>HACHEPS#10)
{

T[1]=sqrt(temp);

/* General column of T */

J‘=2:

for(i-1;i<n1anc-1, f1ag==0;)
{

T[i*nlanc+i-1]=sqrt(betasq(i));

48

